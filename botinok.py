import random
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)

TOKEN = "8131725923:AAFJkvXP0mxUvUif8I-0Kx4h9cqaWnjztdw"  # –ù–µ –∑–∞–±—É–¥—å —Å–∫—Ä—ã—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ–¥–µ!
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
with open('questions.json', 'r', encoding='utf-8') as f:
    questions = json.load(f)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã"
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÑ –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")]],
    resize_keyboard=True
)


def select_questions():
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    uk_questions = [q for q in questions if q['uk_code'].startswith('–£–ö')]
    opk_questions = [q for q in questions if q['uk_code'].startswith('–û–ü–ö')]
    pk_questions = [q for q in questions if q['uk_code'].startswith('–ü–ö')]

    # –í—ã–±–∏—Ä–∞–µ–º 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –£–ö
    uk_codes = list({q['uk_code'] for q in uk_questions})
    selected_uk = random.sample(uk_codes, min(2, len(uk_codes)))

    # –í—ã–±–∏—Ä–∞–µ–º 2 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –û–ü–ö/–ü–ö (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—è —Ü–∏—Ñ—Ä—ã)
    opk_pk_questions = opk_questions + pk_questions
    opk_pk_codes = list({q['uk_code'] for q in opk_pk_questions})

    forbidden_numbers = [int(code.split('-')[1]) for code in selected_uk]
    available_codes = [
        code for code in opk_pk_codes
        if int(code.split('-')[1]) not in forbidden_numbers
    ]

    selected_opk_pk = random.sample(available_codes, min(2, len(available_codes)))

    # –°–æ–±–∏—Ä–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
    result = []
    for code in selected_uk:
        pool = [q for q in uk_questions if q['uk_code'] == code]
        result.append(random.choice(pool))

    for code in selected_opk_pk:
        pool = [q for q in opk_pk_questions if q['uk_code'] == code]
        result.append(random.choice(pool))

    random.shuffle(result)
    return result


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:",
        reply_markup=main_keyboard
    )


@dp.message(lambda m: m.text == "üîÑ –ù–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
async def new_questions(message: types.Message):
    selected = select_questions()

    for q in selected:
        btn = InlineKeyboardButton(
            text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç",
            callback_data=f"ans_{q['uk_code']}"
        )
        await message.answer(
            f"üìå {q['uk_code']}\n‚ùì {q['text']}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[btn]])
        )


@dp.callback_query(lambda c: c.data.startswith('ans_') or c.data.startswith('hide_'))
async def toggle_answer(callback: types.CallbackQuery):
    data = callback.data
    code = data.split('_')[1]
    question = next((q for q in questions if q['uk_code'] == code), None)

    if not question:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if data.startswith("ans_"):
        text = f"üìå {question['uk_code']}\n‚ùì {question['text']}\n\nüìù <b>–û—Ç–≤–µ—Ç:</b>\n{question['answer']}"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üôà –°–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"hide_{question['uk_code']}")]]
        )
    else:
        text = f"üìå {question['uk_code']}\n‚ùì {question['text']}"
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"ans_{question['uk_code']}")]]
        )

    try:
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    await callback.answer()

@dp.message(lambda m: m.sticker is not None)
async def on_sticker(message: types.Message):
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Å—Ç–∏–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç
    await message.answer_sticker(message.sticker.file_id)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
